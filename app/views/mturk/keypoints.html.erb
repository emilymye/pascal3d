<div id="marker" class="marker"></div>

<div class="error hide">

  Error: Your browser does not support WebGl - you cannot do this task.<br>
  You can enable WebGL in your browser by following the instructions below.<br>

  <h2>Desktop Browsers</h2>
  <p><span style="font-weight:bold">Internet Explorer</span><br> You need the latest version: IE11. IE9,10 do not support WebGL.<br></p>
  <p><span style="font-weight:bold">Chrome</span><br> 1) Open Google Chrome. (latest version recommended)<br> 2) Type <u>chrome://flags</u> in the address bar.<br> 3) Scroll down to <u>"Disable WebGL"</u> and click "Disable".<br> 4) Relaunch the browser.<br></p>
  <p><span style="font-weight:bold">Safari</span><br> 1) Open Safari.<br> 2) Open [Safari]-[Preferences...] from menubar.<br> 3) Go to the "Advanced" tab.<br> 4) At the bottom, check <u>"Show Develop menu in menu bar"</u> in the checkbox.<br> 5) In the menubar, you can now find [Develop] menu. Select <u>"Enable WebGL"</u>.<br>
  </p>
  <p><span style="font-weight:bold">Firefox</span><br> 1) Open Firefox. (latest version recommended)<br> 2) Type <u>about:config</u> in the address bar.<br> 3) Type <u>"webgl"</u> in the search bar.<br> 4) Enable <u>"webgl.forceenabled"</u>. (Make sure if its value is "true".)<br> 5) Make sure the value of <u>"webgl.disabled"</u> is "false". If not, toggle the value.<br> * You can switch the value between "true" and "false" either by [mouse-double-click] or [mouse-right-button]-[choose toggle].<br></p>

  <h2>Mobile Browsers</h2>
  Firefox mobile for Android supports WebGL natively. However, we do not recommend to use mobile browsers for the task.

</div>


<div class = "container">

<% if @annotation.nil? %>
<div class="error">Error- this HIT is invalid. Please disregard.</div>

<% else %>
<% mesh = @annotation.mesh %>
<% cat_pretty = @annotation.category_name.humanize.downcase %>
<!--<% keyptJSON = JSON.generate(@annotation.keypoint_matches) %>-->

  <div class="instructions">
    <h2>Instruction : Matching points on the mesh <%= cat_pretty %> to the photo</h2>
    <p>
      Given a keypoint - a red dot on the 3D <%= cat_pretty %> - find the corresponding point on the <%= cat_pretty %> in the photo. Click to mark the point (a blue dot will appear) 
    </p>

    <hr>
    <h2>Instruction : Simple Question</h2>
    <p>
      <b>Q1</b> asks you whether the <br>
    </p>
    <div class = "buttons hide">
      Use the buttons below to change keypoints. 
      You will be allowed to submit only once you have given an answer for all keypoints<br/>
      <div style = "margin-bottom:5px;">
        <a id="control_prev" class="btn btn-blue">Prev</a>
        <a id="control_next" class="btn btn-blue">Next</a>
      </div>
      <div id="match_status"></div>
      <br/>
    </div><!--end buttons hide-->

    <!--Simple Questions-->
    <form>
      <br>
      <h3>Q. Keypoint shown as a red dot in the image is ...</h3>
      <input type="radio" name="reason_no_keypoint" required value="visible"><span style="font-size:16px">Visible</span>.
      <input type="radio" name="reason_no_keypoint" required value="truncated"><span style="font-size:16px">Truncated</span>.
      <input type="radio" name="reason_no_keypoint" required value="Occluded"><span style="font-size:16px">Occluded</span>.
      <input type="radio" name="reason_no_keypoint" required value="Challenging"><span style="font-size:16px">Challenging</span>.
      <br>
    </form>

    <!-- preview or submit button -->
    <% if @preview %>
    <div>Once you begin this task, you will see a button to submit your annotation here.</div>
    <% else %>
    <div id="keypoints_information"> </div>
    <form id="keypoint_form" action="<%=@formurl%>"  method="post">
      <%= hidden_field_tag 'task', "keypoints" %>
      <%= hidden_field_tag 'annotation_id', @annotation.id %>
      <%= hidden_field_tag 'assignmentId', @assignmentId %>
    
      <%= hidden_field_tag 'category_name', @annotation.category_name %>
      <%= hidden_field_tag 'mesh', @annotation.mesh %>
      <%= hidden_field_tag 'elevation', @annotation.elevation %>
      <%= hidden_field_tag 'azimuth', @annotation.azimuth %>

      <%= hidden_field_tag 'reason_no_keypoint', @annotation.reason_no_keypoint %>

      <%= submit_tag 'Submit', :class => "btn btn-green hide" %>
    </form>
  <%end%><!--end preview or submit button-->

</div><!--end instruction-->

  <div class = "images">
    <%= render :partial => "annotated_image", :locals => { :img_file => @annotation.image_file, :annotation => @annotation } %>
    <%= render :partial => "gl_viewer", :locals => { :mesh => mesh, :small => false, :is_mesh => true }%>
  </div>
<% end %>
</div><!--end container-->


<script>
  $(function(){
    var markerOffset = $("#marker").width()/2;
    // var keypointMatches = <%= raw keyptJSON%>;
    var keypointNames = [];
    // for(var k in keypointMatches) keypointNames.push(k);
    var count = 0;
    var setKeypoints = {};
    // var nKeypoints = keypointNames.length;
    var currKeypoint = 0;

    if ( !Detector.webgl ){
      $(".error").show();
      $(".container").remove();
      return false;
    }

    var canvasid = $("canvas.viewport").attr("id");
    var objV = new ObjectViewer("<%=mesh%>",canvasid, {
      elevation: parseFloat("<%= @annotation.elevation %>"),
      azimuth: parseFloat("<%= @annotation.azimuth %>"),
      onLoaded: function() { 
        $(".buttons").show();
        $("#" + canvasid).next().hide();
        $("input[type='submit']").show();
        
        // ----------
        var keypointMatches = objV.findVisibleKeypoints(); // JSON format
        for(var k in keypointMatches) keypointNames.push(k);
        var nKeypoints = keypointNames.length;
        // var keyptVal = JSON.stringify(keypointMatches);
        // ----------
        objV.loadKeypointMeshes(keypointMatches);
        objV.setCurrentKeypoint( keypointNames[currKeypoint] );

        $("input[type='submit']").click(function(e){e.stopPropagation();});
        $("#control_next").click(function(e){ changeKeypoint(1);e.stopPropagation(); });
        $("#control_prev").click(function(e){ changeKeypoint(-1);e.stopPropagation(); });

        $(document).click( setMarker );
      }
    });

    function setMarker(e){
      var offset = $("#task_image").offset();
      var px = e.pageX - offset.left;
      var py = e.pageY - offset.top;
      var kpName = keypointNames[currKeypoint];
      keypointMatches[kpName].px = px;
      keypointMatches[kpName].py = py;
      console.log(keypointMatches[kpName]);
      setKeypoints[kpName] = true;

      $("marker").show();
      $("#marker").offset({ top: e.pageY - markerOffset, left: e.pageX - markerOffset});
      count = 0;
      for (var i in setKeypoints){
        if (setKeypoints[i]) count++;
      }
      $("#match_status").text( count + " of " + nKeypoints + " keypoints matched");
    } 

    function changeKeypoint(incr) {
      currKeypoint = currKeypoint + incr;
      if (currKeypoint < 0) 
        currKeypoint = nKeypoints - 1;
      else if (currKeypoint >= nKeypoints)
        currKeypoint = 0;
      var kpName = keypointNames[currKeypoint];

      if (!isNaN(keypointMatches[kpName].px) && 
          !isNaN(keypointMatches[kpName].py)){
        var offset = $("#task_image").offset();
        $("#marker").offset({ 
          top: offset.top + keypointMatches[kpName].py - markerOffset,
          left: offset.left + keypointMatches[kpName].px - markerOffset
        })
      } else {
        $("#marker").hide();
      }
      objV.setCurrentKeypoint(kpName);
    }

    $("#keypoint_form").submit(function(){
      if (count < nKeypoints) {
        alert("Not all keypoints have been matched!")
        return false;
      }
      for (var n in keypointMatches){
        if (isNaN(keypointMatches[n].x)  || 
            isNaN(keypointMatches[n].y)  ||
            isNaN(keypointMatches[n].z)  ||
            isNaN(keypointMatches[n].px) ||
            isNaN(keypointMatches[n].py))
          return false
      }

      console.log(JSON.stringify(keypointMatches));
      $("#keypoint_form").append(
        $("<input>").attr("type", "hidden")
                    .attr("name","keypoint_matches")
                    .val(JSON.stringify(keypointMatches))
      );
    });
  }); 
</script>
